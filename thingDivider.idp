/**
 * This is a modeling of a Thing Divider problem, where Participants are allowed to pick their favourite Things. These Things,
 * some of which may have a minimum or maximum number of Participants, should be divided among them, so that each
 * Participant is allotted a single Thing. Things may be mandatory, meaning that at least 1 Participant should be allotted
 * the thing (this may be so if the Things are tasks). Things may also have a minimum and a maximum number of Participants.
 * This is a modeling of a fair system, where each Participant's happiness is maximized, and unhappiness, if unavoidable,
 * is randomly allotted.
 */

include <table_utils>
include "modelHelpers.idp"
include "smallestSetOfAtoms.idp"

vocabulary ThingDividerVoc {

	// a Participant to the division
	type Participant
	// Id and Name predicates can be added here

	// a Thing to be allotted
	type Thing
	// Id, Name and Description predicates can be added here

	type Score isa int

	// whether the Thing is mandatory to be allotted
	Mandatory(Thing)
	// the maximum number of Participants
	MaxNbParticipants(Thing, nat)
	// the minimum number of Participants, if it is to be allotted
	MinNbParticipants(Thing, nat)

	// a Participant's vote for a given Thing models how happy the Participant indicated he would be to be allotted the Thing
	Voted(Participant, Thing, Score)
	// a Participant is Active if he has brought out his vote
	Active(Participant)
	// a Participant's ImplicitScore for a given Thing models how happy the Participant would be to be allotted the Thing
	ParticipantScore(Participant, Thing, Score)

	// the Thing allotted to a Participant
	Allotted(Participant, Thing)
	FinalScore(Participant) : Score

	// initial allotment
	AllottedInit(Participant, Thing)
	// whether the initial allotment should be the final allotment for a participant, this is required to be able to iteratively find the best model
	AllottedInitFinal(Participant)

} //ThingDividerVoc

theory ThingDividerTheory : ThingDividerVoc {

	// Active
	{
		! p [Participant] : Active(p) <- ? t [Thing] s [Score] : Voted(p, t, s).
	}

	// ParticipantScore
	{
		// a Participant that has not voted, is happy with any Thing
		! p [Participant] t [Thing] : ParticipantScore(p, t, MAX[:Score]) <- ~Active(p).
		// a Participant that has voted, has indicated his happiness with some Things
		! p [Participant] t [Thing] s [Score] : ParticipantScore(p, t, s) <- Active(p) & Voted(p, t, s).
		// a Participant that has voted, is unhappy with any other Thing
		! p [Participant] t [Thing] : ParticipantScore(p, t, MIN[:Score]) <- Active(p) & ! s [Score] : ~Voted(p, t, s).
	}

	// FinalScore
	{
		//TODO: update when multiple Things can be allotted to one Participant
		! p [Participant] s [Score] : FinalScore(p) = s <- ? t [Thing] : Allotted(p, t) & ParticipantScore(p, t, s).
	}

	! p [Participant] t [Thing] : AllottedInit(p, t) => Allotted(p, t).
	! p [Participant] t [Thing] : AllottedInitFinal(p) & ~AllottedInit(p, t) => ~Allotted(p, t).

	//TODO: update when multiple Things can be allotted to one Participant
	// all Participants are allotted a single thing
	! p [Participant] : ?1 t [Thing] : Allotted(p, t).

	// mandatory Things are allotted to at least one Participant
	! t [Thing] : Mandatory(t) => ? p [Participant] : Allotted(p, t).
	// the maximum number of participants for a Thing is respected
	! t [Thing] n [nat] : MaxNbParticipants(t, n) => #{ p [Participant] : Allotted(p, t) } =< n.
	// if a Thing is allotted to any participant, the minimum number of participants is respected
	! t [Thing] n [nat] : MinNbParticipants(t, n) => #{ p [Participant] : Allotted(p, t) } >= n | ! p [Participant] : ~Allotted(p, t).

} //ThingDividerTheory

term LowestNonFinalScore : ThingDividerVoc {
	min{ p [Participant] s [Score] : FinalScore(p) = s & ~AllottedInitFinal(p) : s }
} //LowestNonFinalScore

query LowestNonFinalScoreParticipants : ThingDividerVoc {
	{ p [Participant] : ~AllottedInitFinal(p) & FinalScore(p) = min{ pp [Participant] s [Score] : FinalScore(pp) = s & ~AllottedInitFinal(pp) : s } }
}

structure ThingDividerExampleStruct : ThingDividerVoc {
	//Participant = { P1 ; P2 ; P3 ; P4 ; P5 }
	Participant = { P1 ; P2 }
	Thing = { T1 ; T2 ; T3 }
	Score = { 0..100 }
	Mandatory = { }
	//MaxNbParticipants = { }
	MaxNbParticipants = { (T1, 0) }
	MinNbParticipants = { }
	//Voted = { (P1, T1, 10) ; (P1, T2, 90) ; (P2, T1, 60) ; (P2, T2, 40) ; (P3, T2, 100) ; (P4, T1, 20) ; (P4, T2, 80) }
	Voted = { (P1, T1, 90) ; (P1, T2, 10) ; (P2, T1, 60) ; (P2, T2, 20) ; (P2, T3, 20) }
	AllottedInit = { }
	AllottedInitFinal = { }
} //ThingDividerExampleStruct


procedure main() {
	local bestModel = findBestModelIteratively(ThingDividerExampleStruct);
	if bestModel == nil then
		print("Your theory is insatisfiable!");
		return;
	end
	print("best model");
	print(bestModel);
} //main()

//TODO: more abstraction for predicate tables throughout code

procedure findBestModelIteratively(struct) {
	local structure = clone(struct);
	local theory = ThingDividerTheory;
	local term = LowestNonFinalScore;
	//TODO: using IDP's built-in maximize or minimize would be better, but it seems to only return 1 model
	local maxModels, maxValue = maximizeModels(allmodels(theory, structure), term);
	if table.getn(maxModels) == 0 then
		return nil;
	elseif table.getn(maxModels) == 1 then
		return maxModels[1];
	end
	// TODO: test if this makes things better or worse
	generalizeModels(structure, maxModels, "Allotted");
	local maximizedParticipants = intersect(maxModels, LowestNonFinalScoreParticipants);
	if table.getn(maximizedParticipants) == 0 then
		//TODO: somehow detect disjunct sets... This will not be easy
	else
		local initPredicateInterpretation = structure[getvocabulary(structure).AllottedInit]
		local initFinalPredicateInterpretation = structure[getvocabulary(structure).AllottedInitFinal]
		for i,participant in pairs(maximizedParticipants) do
			local modelAllottedCt = maxModels[1][getvocabulary(structure).Allotted].ct
			local thing = nil;
			for j, tuple in pairs(totable(modelAllottedCt)) do
				if tuple[1] == participant then
					thing = tuple[2];
					break;
				end
			end
			if thing == nil then
				print("Something went wrong!");
			end
			maketrue(initPredicateInterpretation, { participant, thing });
			maketrue(initFinalPredicateInterpretation, { participant });
		end
	end
	clean(structure);
	return findBestModelIteratively(structure);
}

// vim: set noexpandtab:

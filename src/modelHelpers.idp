include <table_utils>

procedure generalizeModels(structure, models, predicateName) {
	// clear Allotted table and add only tuples present in one of the models as possibly true
	local predicateInterpretation = structure[getvocabulary(structure)[predicateName]]
	makeAllFalse(predicateInterpretation)
	for i, model in pairs(models) do
		makeUnknown(predicateInterpretation, model[getvocabulary(structure)[predicateName]].ct)
	end
}

//TODO: deprecate. This functionality is now provided by smallestSetOfAtoms.getSmallestSetOfAtomsByQuery. Test whether trying intersect first is more efficient, but I think not.
procedure intersect(models, qry) {
	local intersection = nil
	local function intersectTwo(setOne, setTwo)
		local result = {};
		if setOne == nil then
			return setTwo;
		end
		if setTwo == nil then
			return setOne;
		end
		for value,_ in pairs(setOne) do
			if setTwo[value] ~= nil then
				result[value] = true
			end
		end
		return result;
	end
	for i, model in pairs(models) do
		local queryResult = query(qry, model);
		// transform to table with values as keys
		local set = {};
		for i, tuple in pairs(totable(queryResult)) do
			set[tuple[1]] = true;
		end
		intersection = intersectTwo(intersection, set);
	end
	local result = {};
	// transform set to array
	for value,_ in pairs(intersection) do
		table.insert(result, value);
	end
	return result;
}

procedure makeUnknown(predicateInterpretation, predicateTable) {
	for i, tuple in pairs(totable(predicateTable)) do
		makeunknown(predicateInterpretation, tuple)
	end
}

procedure makeFalse(predicateInterpretation, predicateTable) {
	for i, tuple in pairs(totable(predicateTable)) do
		makefalse(predicateInterpretation, tuple)
	end
}

procedure makeAllFalse(predicateInterpretation) {
	makeFalse(predicateInterpretation, totable(predicateInterpretation.pt));
}

procedure setDomain(structure, typeName, domain) {
	structure[getvocabulary(structure)[typeName].type] = domain;
}

// vim: set noexpandtab:
